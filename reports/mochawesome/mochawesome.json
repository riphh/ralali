{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-15T06:19:05.267Z",
    "end": "2020-03-15T06:19:06.844Z",
    "duration": 1577,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d5e5d685-0eeb-4420-aded-c3a8156e48e6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "186a187a-a72e-428c-918a-31ef171c7ca9",
        "title": "OMDB Movie List",
        "fullFile": "C:\\Users\\Arief\\Desktop\\poc-mocha-chai\\api\\test\\movie-list-test.js",
        "file": "\\api\\test\\movie-list-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 278,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "5a99798a-5c0e-46a3-a05f-230066b5873c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "39508950-395a-4334-9fb2-7e5d60d2fd92",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 536,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "1f441ff3-e3e9-4aac-bfd0-33532a195e13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 200 when I send request with invalid Search Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 200 when I send request with invalid Search Key",
            "timedOut": false,
            "duration": 185,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, invalidkeySearch);\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "c14bfa65-b079-41d1-a583-ea79a8f1c1a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with no API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with no API Key",
            "timedOut": false,
            "duration": 154,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList('', keySearch);\nassert(response.status).to.equal(401);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "fb797fa3-fcad-4279-ad15-be614eb51f12",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with no API Key and no Key Search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with no API Key and no Key Search",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList('','');\nassert(response.status).to.equal(401);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "d95e9a68-cabc-438e-ae77-486b45f15742",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5a99798a-5c0e-46a3-a05f-230066b5873c",
          "39508950-395a-4334-9fb2-7e5d60d2fd92",
          "1f441ff3-e3e9-4aac-bfd0-33532a195e13",
          "c14bfa65-b079-41d1-a583-ea79a8f1c1a1",
          "fb797fa3-fcad-4279-ad15-be614eb51f12",
          "d95e9a68-cabc-438e-ae77-486b45f15742"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1535,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2020
}